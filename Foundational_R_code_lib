## This is a library that will contain some of basic, foundational functions and R code ##
## Designed to be udpated as needed and referenced as I build up my skills and memorize these functions ##

################################# Basic Math functions #####################################
1 + 2                                    ## addition
3 - 1                                    ## subtraction
2 * 3                                    ## multiplication
10 / 5                                   ## division
2 ^ 3                                    ## exponent
20 %% 6                                  ## leftover division. provides the remainder after dividing the right # into the left #
mean(variable_a)                         ## calculates the average of the elements in the variable/vector/object
sum(variable_a)                          ## calculates the sum of the elements in the variable/vector/object
seq(num_start, num_end, by=num_interval  ## Creates a numerical sequence between certain values and at a specified interval
rep(value_sequence, num_repeat)          ## Creates a vector repeating a specified sequence a number of times

################################# Logical & Relational Operators #########################################
### all logical operators will result in a boolen response of either TRUE or FALSE ###
3 > 2                   ## greater than
4.1 >= 4                ## greater than or equal to
2 < 3                   ## less than
2.99 <= 3               ## less than or equal to
3 = 3                   ## equal to
3 != 4                  ## not equal to
TRUE & TRUE             ## & sign is 'AND' operator, returning true only if all logical values evaluated are TRUE
TRUE | FALSE            ## | Pipe is 'OR' operator, returning true if any of logical values evaluated are TRUE
!(TRUE)                 ## ! Not operator simply negates the logical value it is used on (ex. !is.num(var_x) would return TRUE/FALSE depending on where var_x was NOT a number)
&&, ||                  ## Double logical operators only evaluate the first element in an object when used

################################# Basic Object building components ##########################
### Vectors - one dimensional variable that can store one data type only ###
vector_a <- c(element1, element2, element3)      ## creates a vector
names(vector_a) <- c("name1", "name2", "name3")  ## names the elements in a vector
vector_a[2]                                      ## calls the second element of a vector
vector_a["name1"]                                ## calls any element within the vector by name
vector_a[c(1, 3, 4)]                             ## calls multiple elements within a vector by position
vector_a[c("name1", "name3")]                    ## calls multiple specific elements within the vector by name
vector_a[2:5]                                    ## calls a range of elements within a vector by position
logical_comp_vector <- vector_a > 0              ## creates a new vector with TRUE/FALSE for all elements that are greater than 0
vector[logical_comp_vector]                      ## calls only the elements in the orgi. vector that meet the criteria from above
data_frame$variable1 <- ordered(data_frame$variable1, levels = c("Factor1", "factor2", etc.)) 
                                                 ## Re-order an existing ordinal factor variable in priority order

### Matrices - two dimensional variable that can store one data type only ###
matrix_a(elements_in_matrix, byrow = TRUE/FALSE, nrow = #)   ## creates a matrix with elements, by row or by column, with # of rows
rownames(matrix_a) <- vector_a                               ## uses a vector to name all of the rows in the matrix
colnames(matrix_a) <- vector_b                               ## uses a vector to name all of the columns in the matrix   
rowSums(matrix_a)                                            ## outputs the sums of all rows within the matrix (horizontal +)
colSums(matrix_a)                                            ## outputs the sums of all columns within the matrix (vertical +)
rbind(matrix_a, vector_a)                                    ## adds a row, in the form of a vector, to the matrix bottom 
cbind(matrix_a, vector_b)                                    ## adds a column, in the form of a vector, to the matrix right
matrix_a[row_element, col_element]                           ## selects specific element or range of elements within a matrix

### Factors - a statistical data type used to store categorical variables ###
factor_vector <- factor(vector1)                             ## creates a nominal factor vector, by reading the values in vector1,
                                                             ## understanding the categorical values and picking up on the 'level's
                                                             ## that exist, creating a factor based on those values (ex. male/female)
factor_vector <- factor(vector1, order = TRUE, levels = c(low_value, med_value, high_value)
                                                             ## Creates an ordinal factor vector, by reading values in vector 1, and
                                                             ## assigning them a value order from low to high based on your input
levels(factor_vector) <- c("new_factor_name1, etc.)          ## rename the factor levels (male/low/high/etc.) alphabetically
Data_frame$variable1 <- ordered(data_frame$variable1, levels = c("factor1", "factor2", etc.)
                                                             ## This will reorder an existing factor from first to last)
summary(any_object)                                          ## provides quick summary information on the given object

### Data Frames - A two dimensional object that can contain multiple data types, containing rows and columns (set up like pivot table)
data.frame(vector_A, vector_b, vector_c,...)                 ## Creates a data frame by pulling together multiple vectors, with the
                                                             ## vector names being column headers, and all elements being the row values
head(data_frame_a)                                           ## shows the first 10 observations (rows) in a data frame
tail(data_frame_a)                                           ## shows the bottom 10 observations in a data frame
str(data_frame_a)                                            ## shows the structure of the data frame
data_frame_a[row_selection, col_selection]                   ## Selects specific or range of observations from the data frame
data_frame_a$column_name                                     ## selects all observations within a specific column
subset(data_frame_a, subset = some_condition)                ## selects observations within a data frame based on stated condition
order(column_name)                                           ## orders the elements in a data frame column from low to high/ A- Z 
order_variable <- order(data_frame_a$column_c)               ## creates a variable with the ranked order of a variable in the data frame
data_frame_a[order_variable]                                 ## reorders the data frame based on the ranked order created above

### Lists - gathers a variety of objects under one name, containing all object types, in an ordered way ###
list_a <- list(variable1, vector1, matrix1, dataframe1)      ## creates a list with any kind of object
list_a <- list(name1 = object1, name2 = object 2)            ## creates a list with any kind of object and names for each object
names(list_a) <- c("name1", "name2", etc.)                   ## renames an existing list
list_a[[# or "object_name"]]                                 ## selects entire objects using a #, for the order in the list, or by name
list_a[["object_name"]][element#/name]                       ## selects a specific element within an object    
bigger_list <- c(list_a, object_name = new object)           ## adds and object to an existing list

####################################### Conditional Statements - IF, ELSE, ELSE IF ##############################################
if(condition) {                                              ## If statement establishes a condition of any kind, and will run the expression
  expression executed if condition is met                    ##   in the curly brackets {} if it is TRUE, if FALSE, it will not run
  } else if(2nd condition) {                                 ## Secondary if conditional that can be added for additional control flow
  expression executed if 2nd condition is met                ##   and can contain as many else if statements as desired
  } else {                                                   ## the else statement is the final 'fall back' expression that is executed
  expression executed if none of above are TRUE              ##   if none of the if statements are TRUE, ending the control flow
  }

####################################### Data Summary, manipulation and Comparison functions ########################################
table(data_frame$column_name_factor)                         ##returns counts of factor variables by level within the specified factor variable
Summary(data_frame)                                          ## returns descriptive informaion and metrics for the specified object, results varying for vectors/data frames
by(variable_1, breakdown_variable, function_applied)         ## breakdown variable_1 by a second variable/dimension, and then perform a summary function for comparison (summary, mean, sum, etc.)
filter(column_name, filter_condition1, filter_condition2)    ## Extracts rows of data from an object according to given logical criteria
str_detect(column_name, "text_string")                       ## Searches for a string of text within a specified object, returning all results                                                          



